plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.12'
    id 'org.springframework.boot' version '2.6.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

group = 'hello.world.demo'
version = '1.0.0'
sourceCompatibility = 17
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
}

configurations {

    serverImplementation.extendsFrom(implementation)
    clientImplementation.extendsFrom(implementation)
    testImplementation.extendsFrom(implementation)
}

application {
    mainClassName("hello.world.demo.Starter")
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.github.prominence:openweathermap-api:2.3.0'
    serverImplementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    clientImplementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation fileTree(dir: 'src/client/libs', include: ['*.jar'])

}

javafx {
    version = '17.0.2'
    modules = ['javafx.base', 'javafx.controls', 'javafx.fxml', 'javafx.media', 'javafx.web']
    configuration = 'clientImplementation'
}

sourceSets {
    common {
        java {
            srcDir 'src/main/java'
        }
    }
    server {
        java {
            srcDir 'src/server/java'
        }
        resources {
            srcDir 'src/server/resources'
        }
        compileClasspath += common.output
        runtimeClasspath += common.output
    }
    client {
        java {
            srcDir 'src/client/java'
        }
        resources {
            srcDir 'src/client/resources'
        }
        compileClasspath += common.output
        runtimeClasspath += common.output
    }
    test {
        java {
            srcDir 'src/test/java'
        }
        resources {
            'src/test/resources'
        }
    }
}

processServerResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

test {
    defaultCharacterEncoding = 'UTF-8'
    useJUnitPlatform()
}
